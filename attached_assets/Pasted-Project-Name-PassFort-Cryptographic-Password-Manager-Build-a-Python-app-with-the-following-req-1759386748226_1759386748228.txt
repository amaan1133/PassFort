Project Name: PassFort – Cryptographic Password Manager

Build a Python app with the following requirements:

1. Overview:
   - A secure password manager called "PassFort".
   - All saved passwords are encrypted with AES.
   - The AES key is itself encrypted with RSA (hybrid encryption).
   - Passwords are stored with SHA-256 hashes for integrity.
   - Include a creative "Honey Vault" feature that shows decoy passwords if a wrong master key is entered.

2. Features:
   A) User Interface:
      - Use Tkinter for a simple GUI with buttons:
        * Add Password
        * View Passwords
        * Generate Strong Password
        * Unlock Vault
      - A log/status box that shows operations (e.g., "Password encrypted", "Vault unlocked", "Integrity OK").

   B) Add Password:
      - User enters service name (e.g., "Gmail") and password.
      - If no password is entered, generate a random strong password.
      - Encrypt the password with AES (AES-256-GCM or Fernet).
      - Encrypt the AES key with RSA public key.
      - Store data as JSON:
        { service, encrypted_password, encrypted_aes_key, hash }
      - Hash = SHA-256(service + password) for integrity.

   C) View Passwords / Unlock Vault:
      - User enters RSA private key to unlock vault.
      - Decrypt AES key with RSA private key.
      - Use AES key to decrypt passwords.
      - Verify SHA-256 hashes before showing password.
      - If correct key → show real passwords.
      - If wrong key → show decoy “Honey Vault” (fake but realistic-looking passwords).

   D) Generate Strong Password:
      - Button generates random strong password with letters, numbers, and symbols.
      - Automatically encrypts and saves it.

3. Security Implementation:
   - AES: Use Python `cryptography` (Fernet or AES-GCM).
   - RSA: 2048 or 3072-bit keys with OAEP padding.
   - Hashing: SHA-256 from hashlib.
   - Use secure random generator (`secrets` or `os.urandom`).
   - Store keys in PEM format. Allow importing RSA key pair.

4. Code Structure:
   - Functions:
       generate_rsa_keypair(bits=2048)
       generate_aes_key()
       encrypt_password(password, aes_key)
       decrypt_password(encrypted, aes_key)
       encrypt_aes_key_rsa(aes_key, public_key)
       decrypt_aes_key_rsa(encrypted_key, private_key)
       hash_password(service, password)
       save_entry(entry, file)
       load_entries(file)
   - Classes:
       VaultManager (handles adding/viewing passwords, honey vault logic)

5. Honey Vault Feature:
   - If wrong RSA private key is entered:
       * App still "unlocks"
       * But shows fake passwords (auto-generated decoys)
       * Ensure fakes look realistic (common services like Gmail, Facebook, Netflix).

6. Extra polish:
   - Simple Tkinter GUI with buttons, input fields, and password list display.
   - Strong error handling (bad keys, corrupted files).
   - README.md with instructions:
       * Install dependencies
       * Run with `python passfort.py`
       * Generate RSA keys
       * Add and unlock passwords

7. Dependencies:
   - cryptography
   - tkinter (built-in)
   - hashlib
   - secrets / os

End goal:
A working Tkinter app called PassFort where users can add encrypted passwords, unlock their vault with RSA, verify integrity with SHA-256, and see a creative honey-vault deception if they try with the wrong key.
